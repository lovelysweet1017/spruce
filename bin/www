#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('v2.0.0:server');
var http = require('http');

var Room = require('../utils/models/room');
var User = require('../utils/models/user');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || app.conf.http.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
  * Create websocket server
  */

var io = require('socket.io')(server);

io.on('connection', (client) => {
  client.on('typing', function (data) {
    client.emit('typing', {
      who:data.who
    })
  });
  client.on('msg', function (data) {
    Room
    .findOne({id: data.roomId})
    .exec((err, room) => {
      room.chats.push({
        txt:data.txt,
        by:data.by,
        time:new Date()
      })
      room = Room(room);
      room.save((err, success) => {
        io.sockets.emit('msg', {
          txt:data.txt,
          by:data.by
        })
      })
    })
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
