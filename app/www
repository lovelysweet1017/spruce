#!/usr/bin/env node

const { app, BrowserWindow, ipcMain } = require("electron");
const nodeGit = require("nodegit");
const fs = require("file-system");
const npmi = require("npmi");
let mainWindow;
const ps = require("ps-node");

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1400,
    height: 700,
    webPreferences: {
      nodeIntegration: true
    }
  });

  mainWindow.loadFile(__dirname + "/web/index.html");
  mainWindow.on("closed", function() {
    mainWindow = null;
  });
  console.log(process.platform);
  ipcMain.on("start_spruce", function() {
    let available = true;
    try {
      fs.readFileSync(__dirname + "/.spruce/bin/www");
    } catch (err) {
      available = false;
    }
    // transferProgress: {
    //   throttle: 0,
    //   callback: (progress) => {
    //     return Object.keys(progress.__proto__).map(k => console.log(`${k}: ${progress[k]()}`))
    //   }
    // }
    if (available) {
      let { pid, stdout } = require("child_process").fork(
        __dirname + "/.spruce/bin/www",
        ["--app"],
        {
          detached: true,
          silent: true
        }
      );
      stdout.on("data", function(data) {
        data = data.toString();
        if (
          data.split("Developer key: ").length &&
          data.split("Developer key: ").length > 1
        ) {
          console.log(data);
          mainWindow.webContents.send(
            "key",
            data.split("Developer key: ")[1].split("\n")[0]
          );
        }
      });
      console.log(pid);
    } else {
      try {
        fs.rmdirSync(__dirname + "/.spruce");
      } catch (err) {}
      console.log("Downloading...");
      nodeGit
        .Clone("https://github.com/dan-divy/spruce", __dirname + "/.spruce", {
          checkoutBranch: "project-oak",
          fetchOpts: {
            callbacks: {
              transferProgress: function(stats) {
                const progress =
                  (100 * (stats.receivedObjects() + stats.indexedObjects())) /
                  (stats.totalObjects() * 2);
                mainWindow.webContents.send("progress", {
                  name: "git",
                  progress
                });
              }
            }
          }
        })
        .then(function() {
          mainWindow.webContents.send("progress", {
            name: "git",
            progress: 100
          });
          mainWindow.webContents.send("progress", {
            name: "npm",
            progress: 0.0
          });
          var options = {
            path: __dirname + "/.spruce", // installation path [default: '.']
            forceInstall: true
          };

          npmi(options, function(err, result) {
            if (err) {
              return mainWindow.webContents.send(
                "progress-error",
                err.toString()
              );
            }

            mainWindow.webContents.send("progress", {
              name: "npm",
              progress: 100,
              done: true
            });
          });
          process.stdout.on("data", function(obj) {
            console.log("CAUGHT: " + obj);
          });
          mainWindow.webContents.send("progress", {
            name: "npm",
            progress: 50
          });
        })
        .catch(err => {
          mainWindow.webContents.send("progress-error", err.toString());
        });
    }
  });
  ipcMain.on("end_spruce", function() {
    ps.lookup({ command: "spruce" }, function(err, results) {
      if (results[0] && results[0].command == "spruce") {
        process.kill(results[0].pid);
      }
    });
  });
}

app.on("ready", createWindow);

app.on("window-all-closed", function() {
  if (process.platform !== "darwin") app.quit();
});

app.on("activate", function() {
  if (mainWindow === null) createWindow();
});
